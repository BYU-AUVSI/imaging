class submitted_target:
    """
    This model class helps represent the final form of an AUVSI target submission.
    Essentially just removes helper columns from outgoing_ classification models

    NOTE: for this to work properly (and to make maintenance and understanding easier)
    attribute names produced by toDict and toAuvsiJson should match the names
    of files within the InteropImage ROS message
    """

    # A list of keys to exclude in the output .json file generated by the DAO
    # for standard and off_axis target types
    KEYS_TO_EXCLUDE = ['target', 'crop_path', 'description', 'submitted']

    # a list of keys to include in the output .json file generated by the DAO
    # for emergent target type
    EMERGENT_KEYS_TO_INCLUDE = ['latitude', 'longitude', 'description', 'autonomous']

    def __init__(self, sqlRow=None, outgoingManualOrAutonomous=None, autonomous=None):
        
        # initialize all the attributes to None
        self.target = None
        self.autonomous = None
        self.type = None
        self.crop_path = None
        self.latitude = None
        self.longitude = None
        self.orientation = None
        self.shape = None
        self.background_color = None
        self.alphanumeric = None
        self.alphanumeric_color = None
        self.description = None
        self.submitted = None

        if sqlRow is not None:
            for i in range(0, len(self.allProps())):
                setattr(self, self.allProps()[i], sqlRow[i])

        if autonomous is not None:
            self.autonomous = autonomous
        else:
            self.autonomous = False

        if outgoingManualOrAutonomous is not None:
            outDict = outgoingManualOrAutonomous.toDict()
            for key in self.allProps():
                if key in outDict:
                    setattr(self, key, outDict[key])


    # TODO: this is hacky and i hate it
    def allProps(self):
        return ['target', 'autonomous', 'type', 'crop_path', 'latitude', 'longitude', 'orientation', 'shape', 'background_color', 'alphanumeric', 'alphanumeric_color', 'description', 'submitted']

    def toDict(self, exclude=None):
        dict = {}
        for attr, value in self.__dict__.items():
            corrected_name = attr#[1:] # remove first underscore
            dict[corrected_name] = value
        return dict

    def toAuvsiJson(self, exclude=None):
        dict = {}
        if hasattr(self, 'type') and self.type == 'emergent':
            # generate an emergent target output
            for attr, value in self.__dict__.items():
                corrected_name = attr#[1:] # remove first underscore

                if corrected_name in self.EMERGENT_KEYS_TO_INCLUDE:
                    dict[corrected_name] = value
        else:
            for attr, value in self.__dict__.items():
                corrected_name = attr#[1:] # remove first underscore

                if corrected_name not in self.KEYS_TO_EXCLUDE:
                    dict[corrected_name] = value            
        
        if exclude is not None:
            for keyToExclude in exclude:
                if keyToExclude in dict:
                    del dict[keyToExclude]
    
        return dict